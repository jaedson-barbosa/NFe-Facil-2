Erros não serão repetidos, portanto:
1. Apenas A1 será usado, armazenado no firestore e não poderá ser baixado de volta pelo usuário. Se o usuário quiser usar o sistema, terá que ter um certificado A1, e se estiver usando A3, que troque por um A1, o preço não é alto e o custo de desenvolvimento não vale a pena.
https://github.com/JaedsonBarbosa/NFeFacilLegacy/blob/85b52950162a8fdb0777ba7a42fc5af3c09ebf7f/Fiscal/Certificacao/AssinaFacil.cs
https://github.com/JaedsonBarbosa/NFeFacilLegacy/blob/85b52950162a8fdb0777ba7a42fc5af3c09ebf7f/CertificacaoA3/Program.cs
https://github.com/JaedsonBarbosa/NFeFacilLegacy/blob/85b52950162a8fdb0777ba7a42fc5af3c09ebf7f/CertificacaoA3/Metodos.cs

2. Testar a assinatura e a comunicação com a SEFAZ por meio do uso de functions do firebase.
3. Este será um emissor fiscal com foco na simplicidade de desenvolvimento e em baixos custos, portanto nada de gerenciamento de estoque ou coisas do tipo (a não ser que a aplicação dê muito certo e se expanda muito, mas de toda forma isso não deve ser falado como algo que será implementado, se for implementado, que venha de surpresa, sempre dizendo "não tenho planos para implementar algo do tipo"), mas coisas como scanner de código de barras podem ser implementados (tanto o USB quanto a câmera do celular).
4. Usar interface simples, preferencialmente linear, que não exija adaptação para uso no celular, garantindo um uso consistente entre plataformas. Ela deve ser gerada de forma automatizada a partir dos schemas XML da NFe.
5. Para impressão do DANFE NFC-e pode ser usado a biblioteca .NET Core do ZeusAutomacao/DFe.NET, onde pode ser feito um serviço que roda em background. Essa ideia também pode ser usada para o uso de certificado A3. Pro Android tem alguns apps que permitem essa impressão também. Isso será implementado antes de ser lançado, mas deve permanecer latente até que os testes sejam feitos numa impressora adequada. Usar a biblioteca rodando numa VM para gerar o PDF que pode ser baixado também vale, testar essa impressão numa impressora baratinha (algumas imprimem PDF).

BANCO DE DADOS - FIRESTORE
empresas:
publicCert
privateCert
emit (...)
lastUpdate
-usuarios:
    status //0-Aguardando analise/1-Acesso revogado/2-Acesso liberado/3-Administrador
    nome
    permissoes: visualizar-dados-base, visualizar-notas-emitidas, cadastrar-dados-base, emitir-notas
-dados:
    id
    lastUpdate

LOCALSTORAGE
empresas:
id
status
permissoes
empresa

SESSIONSTORAGE
idEmpresa

Metas da semana
OK  Primeiro, implementar a edição de dados base e de emitentes
OK  Busca de dados base na tela de NFe
OK      Produtos
OK      Clientes
OK      Motoristas
OK  Tipos de ICMS de acordo com o regime do emitente
    Sistemas de servidor básicos (sem todas análises)
OK      scanUsuario
OK      scanRegistro
OK      cadastrarCNPJ
+-      requisitarAcesso
        apenasSalvarNFe
            gerarPreviewDANFE
        assinarTransmitirNFe
OK          assinarNFe
            transmitirNFe
            gerarDANFE
    Corrigir documentações no schema json e unir os 2 num único
    Implementar sincronizações

Se for dar muito trabalho pra fazer a parte de transmissão, usar o https://github.com/lealhugui/node-dfe

Para gerar o DANFE, o melhor é usar o https://github.com/nfephp-org/sped-da dado que ele não tem toda a complicação presente no Zeus e porque o Zeus aparentemente não faz manutenção da geração de PDF de NFCe no .Net Core e para usar o .Net Framework não dá para ser usado o Functions. Para isso será usado o Cloud Functions e https://github.com/GoogleCloudPlatform/functions-framework-php. Tudo deve ser feito  conforme os tutoriais destes repositórios. Para fazer tudo corretamente é bom aprender pelo menos o básico de PHP. O projeto tem que ficar bom e só vai ser divulgado depois de estar funcionando todos os sistemas.
Ficar de olho: https://github.com/erpbrasil/erpbrasil.edoc.pdf

Um código muito util na hora de testar se tá tudo funcionando é esse:
var saveData = (function () {
    var a = document.createElement("a");
    document.body.appendChild(a);
    a.style = "display: none";
    return function (blob, fileName) {
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = fileName;
        a.click();
        window.URL.revokeObjectURL(url);
    };
}());